{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["onSpaces","tokens","str","outEmptyTokens","token","parseSpec","spec","line","convertStringIntoArrayOfLines","labelLine","headerLine","areaLines","gridTemplateColumns","parseColumnsFrom","gridTemplateRows","row","parseRowsFrom","gridTemplateAreas","parseAreasFrom","key","BreakingGrid","children","layout","gap","selected","parsedLayout","layoutSpec","acc","item","parseLayout","validSlots","kid","gridArea","console","style","css","display","columnGap","rowGap","transition","child","className","App","useState","setGap","zoom","setZoom","headerHeight","setHeaderHeight","selectedLayout","setSelectedLayout","getSliderHandler","setter","ev","nv","log","randColor","hashCode","s","split","reduce","a","b","charCodeAt","random","seed","x","Math","sin","floor","r","g","MockDiv","props","slot","backgroundColor","height","Slider","value","onChange","aria-labelledby","Select","target","MenuItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f96561a7.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './styles.module.css'\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\n\nconst onSpaces = /(\\s+)/\nconst tokens = str => str.split(onSpaces)\nconst convertStringIntoArrayOfLines = spec => spec.split(/[\\r\\n]+/).map(line => line.trim()).filter(line => line.length > 0)\nconst outEmptyTokens = token => token.trim().length > 0\nconst parseColumnsFrom = headerLine => tokens(headerLine).filter(outEmptyTokens)\nconst parseRowsFrom = areaLines => areaLines.map(row => tokens(row).filter(outEmptyTokens)[0])\nconst parseAreasFrom = areaLines => areaLines.map(row => `\"${tokens(row).filter(outEmptyTokens).splice(1).join(\" \")}\"`)\n\nfunction parseSpec(spec) {\n  const [labelLine, headerLine, ...areaLines] = convertStringIntoArrayOfLines(spec)\n  const gridTemplateColumns = parseColumnsFrom(headerLine)\n  const gridTemplateRows = parseRowsFrom(areaLines)\n  const gridTemplateAreas = parseAreasFrom(areaLines)\n\n  const [key] = labelLine.split(\":\")\n\n  return {\n    key,\n    labelLine,\n    gridTemplateColumns,\n    gridTemplateRows,\n    gridTemplateAreas\n  }\n}\n\n\nfunction parseLayout(layout) {\n  const splitLayoutSpecs = layout.split(/[\\r\\n][\\r\\n](?=.*:)/gm)\n  const layoutObjsArr = splitLayoutSpecs.map(layoutSpec => parseSpec(layoutSpec))\n  const layouts = layoutObjsArr.reduce((acc, item) => (acc[item.key] = item, acc), {})\n  return layouts;\n}\n\n\nexport const BreakingGrid = ({ children, layout, gap, selected }) => {\n  const parsedLayout = parseLayout(layout)[selected]\n\n  const validSlots = parsedLayout.gridTemplateAreas\n    .map(line =>\n      line // defines an areas like: \"header header header other\"\n        .split(/[\\s+\"]/) // converts to ['header','','header','','header', '', 'other']\n        .filter(outEmptyTokens) // converts to ['header','header','header', 'other']\n        .reduce((acc, item) => (acc[item] = true, acc), {})) // converts to {header,other}\n    .reduce((acc, rowObj) => ({ ...acc, ...rowObj }), {}) // dedups\n\n\n\n\n  const modifiedChildren = React.Children\n    .map(children, kid => {\n      const gridArea = kid.props.slot\n      // console.log(\"huh..\",kid)\n      // console.log(\"Kid styles : \", kid.props.style)\n\n      if (validSlots[gridArea] === true) {\n        console.log(\"Pre style : \", kid.props.style)\n        const style = { gridArea, ...kid.props.style }\n        console.log(\"Post style : \", style)\n        return React.cloneElement(kid, {\n          css: style,\n          ...kid.props\n        }, kid.props.children)\n      } else {\n        return undefined\n      }\n    })\n\n  return (\n    <div css={{\n      display: 'grid',\n      // width: '100%',\n      // height: '100%',\n      gridTemplateColumns: parsedLayout.gridTemplateColumns.join(\" \"),\n      gridTemplateRows: parsedLayout.gridTemplateRows.join(\" \"),\n      gridTemplateAreas: parsedLayout.gridTemplateAreas.join(\" \"),\n      columnGap: gap + 'px',\n      rowGap: gap + 'px',\n      transition: 'all 0.5s'\n    }}>{\n        children && children.map(child => {\n          const gridArea = child.props.slot\n          if (validSlots[gridArea] === true) {\n            return (\n              <div className=\"gridSlot\" css={{\n                gridArea\n              }}>\n                {child}\n              </div>\n            )\n          } else {\n            return undefined\n          }\n        })\n      }</div>\n  )\n\n\n\n}","import React, { useState } from 'react'\n\nimport { BreakingGrid } from 'react-breaking-cssgrid'\nimport 'react-breaking-cssgrid/dist/index.css'\n\n\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst App = () => {\n  const [gap, setGap] = useState(5)\n  const [zoom, setZoom] = useState(65)\n  const [headerHeight, setHeaderHeight] = useState(50)\n  const [selectedLayout, setSelectedLayout] = useState('desktop')\n\n  const getHandler = setter => {\n    return ev => {\n      console.log(\"EV:\", ev.target.value)\n      setter(ev.target.value)\n    }\n  }\n\n  const getSliderHandler = setter => {\n    return (ev, nv) => {\n      console.log(\"EV:\", nv)\n      setter(nv)\n    }\n  }\n\n  function randColor(str) {\n    const hashCode = s => s.split('').reduce((a, b) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0)\n    function random(seed) {\n      var x = Math.sin(seed++) * 10000;\n      return x - Math.floor(x);\n    }\n    const r = random(hashCode(str));\n    const g = random(hashCode(str) + 1);\n    const b = random(hashCode(str) + 2);\n    return `rgba(${Math.floor(r * 256)},${Math.floor(g * 256)},${Math.floor(b * 256)},1)`\n  }\n\n  const MockDiv = (props) => {\n    const slot = props.slot;\n    return (\n      <div style={{\n        backgroundColor: randColor(slot),\n        height: '100%'\n      }} {...props}>{slot}</div>\n    )\n  }\n\n  return (\n    <div className=\"exampleApp\">\n\n      <div className=\"container\" style={{\n        zoom: zoom + '%'\n      }}>\n        <div className=\"widthControl\">\n          <BreakingGrid\n            gap={gap}\n            layout={`  \n              desktop: fullscreen, gap=${gap}\n                                  1fr         1fr         1fr         200px\n              ${headerHeight}px   header      header      header      header\n              150px               spotlight1  spotlight2  spotlight3  rightside\n              3fr                 main        main        main        rightside\n              1fr                 footer      footer      footer      rightside\n\n              mobile: vertical, gap=${gap}\n                                  1fr\n              ${headerHeight}px   header\n              150px               spotlight1\n              150px               spotlight2  \n              150px               spotlight3 \n              3fr                 main\n              1fr                 footer\n\n          `} selected={selectedLayout}>\n            <MockDiv slot=\"header\"/>\n            < MockDiv slot=\"spotlight1\" />\n            <MockDiv slot=\"spotlight2\" />\n            <MockDiv slot=\"spotlight3\" />\n            <MockDiv slot=\"main\" />\n            <MockDiv slot=\"footer\" />\n            <MockDiv slot=\"rightside\" />\n          </BreakingGrid>\n        </div>\n\n\n\n      </div>\n\n      <div className=\"control\">\n        <Slider value={zoom} onChange={getSliderHandler(setZoom)} aria-labelledby=\"continuous-slider\" />\n        Zoom : {zoom}\n\n        <Slider value={gap} onChange={getSliderHandler(setGap)} aria-labelledby=\"continuous-slider\" />\n        Gap : {gap}\n\n        <Slider value={headerHeight} onChange={getSliderHandler(setHeaderHeight)} aria-labelledby=\"continuous-slider\" />\n        headerHeight : {headerHeight}\n\n        {selectedLayout}\n        <Select value={selectedLayout} onChange={ev => setSelectedLayout(ev.target.value)}>\n          <MenuItem value='desktop'>Desktop</MenuItem>\n          <MenuItem value='mobile'>Mobile</MenuItem>\n        </Select>\n      </div>\n\n    </div>\n\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}